name: Pre Release SDK Integration Tests

on: [push]

jobs:
  verify-cocoapods-iOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install pod, build project and run tests
        run: |
            cd  SDKIntegrationTestApps/iOSReleaseTest-Cocoapods/
            pod install
            xcodebuild test -scheme iOSReleaseTest -workspace iOSReleaseTest.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
  verify-carthage-iOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Create Cart File, run carthage command, build project and run tests
        env:
            BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
            CURR_DIR=$(PWD)
            cd  SDKIntegrationTestApps/iOSReleaseTest-Carthage/
            echo "git \"file://${CURR_DIR}\" \"$BRANCH_NAME\" " >> cartfile
            carthage update --use-xcframeworks
            xcodebuild test -scheme iOSReleaseTest -project iOSReleaseTest.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
  verify-SPM-iOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: build project and run tests
        run: |
            cd  SDKIntegrationTestApps/iOSReleaseTest-SPM/
            xcodebuild test -scheme iOSReleaseTest -project iOSReleaseTest.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
  verify-manually-with-xcframework-iOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: build xcframework, then build project and run tests
        run: |
            xcodebuild -scheme xcframework
            cd  SDKIntegrationTestApps/iOSReleaseTest-Manual/
            xcodebuild test -scheme iOSReleaseTest -project iOSReleaseTest.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
  verify-manually-with-StaticFramework-iOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: build static xcframework, then build project and run tests
        run: |
            xcodebuild -scheme static-xcframework
            cd  SDKIntegrationTestApps/iOSReleaseTest-Manual-Static/
            xcodebuild test -scheme iOSReleaseTest -project iOSReleaseTest.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 13,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
  verify-cocoapods-tvOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install pod, build project and run tests
        run: |
            cd  SDKIntegrationTestApps/tvOSReleaseTest-Cocoapods/
            pod install
            xcodebuild test -scheme tvOSReleaseTest -workspace tvOSReleaseTest.xcworkspace -destination 'platform=tvOS Simulator,name=Apple TV,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
  verify-carthage-tvOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Verify Integration using Carthage for tvOS
        run: |
            cd  SDKIntegrationTestApps/tvOSReleaseTest-Carthage/
            echo "Skipping it ... its broken"
  verify-manually-with-xcframework-tvOS:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: build xcframework, then build project and run tests
        run: |
            xcodebuild -scheme xcframework
            cd  DKIntegrationTestApps/tvOSReleaseTest-Manual/
            xcodebuild test -scheme tvOSReleaseTest -project tvOSReleaseTest.xcodeproj -destination 'platform=tvOS Simulator,name=Apple TV,OS=latest' | xcpretty && exit ${PIPESTATUS[0]}
