#on: [push]
on:
 workflow_dispatch:
 
jobs:
  build-framework:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build xcframework
        run: |
            ./scripts/prep_xcframework.sh
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release_framework
          path: |
            ./Branch.zip
  build-testbed:
    runs-on: macos-latest
    needs: [build-framework]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          repository: BranchMetrics/qentelli-saas-sdk-testing-ios-testbed
          ref: test-dynamic-linking
          token: ${{ secrets.BRANCHLET_ACCESS_TOKEN_PUBLIC }}
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate 
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Download build artifacts
        uses: actions/download-artifact@v3
      - name : Unzip and copy folder
        run: |
            ls -la ./
            echo pwd
            ls -la release_framework/
            ls -la release_framework/Branch.zip
            unzip release_framework/Branch.zip -d ./Framework/
            ls -la ./Framework
            xcodebuild -workspace DeepLinkDemo.xcworkspace -scheme DeepLinkDemo  -sdk iphoneos -allowProvisioningUpdates archive -archivePath ./IPA/DeepLinkDemo.xcarchive
            ls -la ./IPA/
            xcodebuild -exportArchive -archivePath ./IPA/DeepLinkDemo.xcarchive -exportOptionsPlist IPA/Info.plist -exportPath IPA/
            ls -la ./IPA/
  build:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    steps:
    - uses: convictional/trigger-workflow-and-wait@v1.6.1
      with:
          owner: BranchMetrics
          repo: qentelli-saas-sdk-testing-automation
          github_token: ${{ secrets.BRANCHLET_ACCESS_TOKEN_PUBLIC }}
          workflow_file_name: ios-maven.yml
          ref: 'test-trigger-from-iOSSDKRepo'
          wait_interval: 10
          client_payload: '{}'
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true
    - name: Fetching test report from automation suite
      uses: dawidd6/action-download-artifact@v2
      with:
       github_token: ${{ secrets.BRANCHLET_ACCESS_TOKEN_PUBLIC }}
       repo: BranchMetrics/qentelli-saas-sdk-testing-automation
       workflow: ios-maven.yml
       branch: development
       name: test-results
       check_artifacts:  true
       search_artifacts:  true
       skip_unpack: false
       
    - name: Display S3 url
#       run: grep -C2 'Test report file link' output.txt
      run: grep 'Test report file link' output.txt
    
#     - name: Publishing test report to artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: test-results
#         path: ./*
        
        
